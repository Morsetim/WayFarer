{"version":3,"sources":["../../server/spec/test.js"],"names":["expect","chai","request","app","myToken","wrongToken","describe","it","done","get","set","end","err","res","body","deep","equal","message","status","to","have","property","userProfile","email","firstName","lastName","password","post","send","Data","be","an","catchErrors","signErrors","userInfo","data","Token","patch","bus","number_plate","manufacturer","model","year","capacity","console","log"],"mappings":"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EAA4B,UAACC,IAAD,EAAU;AACtCN,YAAAA,OAAO,CAACO,GAAR,CAAY,iBAAZ,EACGC,GADH,CACO,gBADP,EACyBL,UADzB,EAEGL,MAFH,CAEU,GAFV,EAGGW,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBb,cAAAA,MAAM,CAACa,GAAG,CAACC,IAAL,CAAN,CAAiBK,EAAjB,CAAoBC,IAApB,CAAyBC,QAAzB,CAAkC,QAAlC;AACArB,cAAAA,MAAM,CAACa,GAAG,CAACC,IAAL,CAAN,CAAiBK,EAAjB,CAAoBC,IAApB,CAAyBC,QAAzB,CAAkC,SAAlC;AACAb,cAAAA,IAAI;AACL,aAPH;AAQD,WATC,CAAF,CArB8C,CA+B5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,UAAAA,EAAE,CAAC,yBAAD,EAA4B,UAACC,IAAD,EAAU;AACtCN,YAAAA,OAAO,CAACO,GAAR,CAAY,kBAAZ,EACGC,GADH,CACO,gBADP,EACyBL,UADzB,EAEGL,MAFH,CAEU,GAFV,EAGGW,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBb,cAAAA,MAAM,CAACa,GAAG,CAACC,IAAL,CAAN,CAAiBK,EAAjB,CAAoBC,IAApB,CAAyBC,QAAzB,CAAkC,QAAlC;AACArB,cAAAA,MAAM,CAACa,GAAG,CAACC,IAAL,CAAN,CAAiBK,EAAjB,CAAoBC,IAApB,CAAyBC,QAAzB,CAAkC,SAAlC;AACAb,cAAAA,IAAI;AACL,aAPH;AAQD,WATC,CAAF,CAlD8C,CA4DlD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,UAAAA,EAAE,CAAC,oBAAD,EAAuB,UAACC,IAAD,EAAU;AACjCN,YAAAA,OAAO,CAACO,GAAR,CAAY,aAAZ,EACGC,GADH,CACO,gBADP,EACyBL,UADzB,EAEGL,MAFH,CAEU,GAFV,EAGGW,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBb,cAAAA,MAAM,CAACa,GAAG,CAACC,IAAL,CAAN,CAAiBK,EAAjB,CAAoBC,IAApB,CAAyBC,QAAzB,CAAkC,QAAlC;AACArB,cAAAA,MAAM,CAACa,GAAG,CAACC,IAAL,CAAN,CAAiBK,EAAjB,CAAoBC,IAApB,CAAyBC,QAAzB,CAAkC,SAAlC;AACAb,cAAAA,IAAI;AACL,aAPH;AAQD,WATC,CAAF,CAjHkD,CA2HhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAF,UAAAA,QAAQ,CAAC,gCAAD,EAAmC,YAAM;AAC/CC,YAAAA,EAAE,CAAC,4CAAD,EAA+C,UAACC,IAAD,EAAU;AACzD,kBAAM8B,GAAG,GAAG;AACVC,gBAAAA,YAAY,EAAG,GADL;AAEVC,gBAAAA,YAAY,EAAE,GAFJ;AAGVC,gBAAAA,KAAK,EAAE,GAHG;AAIVC,gBAAAA,IAAI,EAAE,GAJI;AAKVC,gBAAAA,QAAQ,EAAE;AALA,eAAZ;AAOAzC,cAAAA,OAAO,CAACyB,IAAR,CAAa,aAAb,EACGC,IADH,CACQU,GADR,EAEGtC,MAFH,CAEU,GAFV,EAGGW,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB+B,gBAAAA,OAAO,CAACC,GAAR,CAAYhC,GAAG,CAACC,IAAhB;AACAN,gBAAAA,IAAI;AACL,eANH;AAOD,aAfC,CAAF;AAgBD,WAjBO,CAAR;AAkBD,SA/JS,CAAR;AAgKH,OA7OW,CAAR;AA8OD,KAhUS,CAAR;AAiUH,GA5WS,CAAR;AA6WD,CArXO,CAAR","sourcesContent":["import chai from 'chai';\r\nimport supertest from 'supertest';\r\nimport app from '../app';\r\nimport db from './../model/db';\r\n\r\n\r\nconst { expect } = chai;\r\nconst request = supertest(app);\r\nlet myToken;\r\nconst wrongToken = 'hghgjhgjgjgjggg';\r\n\r\ndescribe('All test cases for WarFarer Application', () => {\r\n  // before('Empty user table',()=>{\r\n\r\n  //   db.query('DELETE FROM users');\r\n  //   db.query('DELETE FROM trips');\r\n  //   db.query('DELETE FROM bookings');\r\n  //   db.query('DELETE FROM bus');\r\n  // })\r\n  describe('test case for loading application home page', () => {\r\n    it('Should load application home page', (done) => {\r\n      request.get('/')\r\n        .set('Content-Type', 'application/json')\r\n        .expect(200)\r\n        .end((err, res) => {\r\n          expect(res.body).deep.equal({\r\n            message: \"Welcome to WayFarer Transportation App\"\r\n          });\r\n          if (err) done(err);\r\n          done();\r\n        });\r\n    });\r\n    describe('All test cases for application invalid routes', () => {\r\n      it('Should fail to get route', (done) => {\r\n        request.get('/api/v1')\r\n          .set('Content-Type', 'application/json')\r\n          .expect(404)\r\n          .end((err, res) => {\r\n            expect(res.body).deep.equal({\r\n              status: 'Failed',\r\n              message: 'Page not found'\r\n            });\r\n            if (err) done(err);\r\n            done();\r\n          });\r\n      });\r\n    }); \r\n    describe('All test cases for application invalid routes', () => {\r\n      it('Should fail to get route', (done) => {\r\n        request.get('/api/v1')\r\n          .set('Content-Type', 'application/json')\r\n          .expect(404)\r\n          .end((err, res) => {\r\n            \r\n            expect(res.body).to.have.property('status');\r\n            expect(res.body).to.have.property('message');\r\n\r\n            if (err) done(err);\r\n            done();\r\n          });\r\n      });\r\n    });\r\n    describe('All test cases for Users', () => {\r\n      describe('All test cases for Users sign up', () => {\r\n        it('succedss `201`', (done) => {\r\n          const userProfile = {\r\n            email: 'cagey@yahoo.com',\r\n            firstName: 'cagey',\r\n            lastName: 'Jonny',\r\n            password: '123456'\r\n          };\r\n          request.post('/api/v1/auth/signup')\r\n            .send(userProfile)\r\n            .expect(201)\r\n            .end((err, res) => {\r\n              expect(res.body).to.have.property('Status');\r\n             expect(res.body.Data).to.be.an('object');\r\n              done();\r\n            });\r\n        });\r\n\r\n\r\n      it('should  check if user already in the model and return a `409`', (done) => {\r\n        const userProfile = {\r\n          email: 'cagey@yahoo.com',\r\n          firstName: 'cagey',\r\n          lastName: 'Jonny',\r\n          password: 'password'\r\n        };\r\n        request.post('/api/v1/auth/signup')\r\n          .send(userProfile)\r\n          .expect(409)\r\n          .end((err, res) => {\r\n            expect(res.body).to.have.property('Status');\r\n            expect(res.body).to.have.property('Message');\r\n            done();\r\n          });\r\n      });\r\n    });\r\n it('should not create a new user account and return a `422`', (done) => {\r\n        request.post('/api/v1/auth/signup')\r\n          .send({})\r\n          .expect(422)\r\n          .end((err, res) => {\r\n            expect(res.body).to.have.property('status');\r\n            expect(res.body).to.have.property('message');\r\n            done();\r\n          });\r\n      });\r\n      it('should  not create a new user account and return a `400`', (done) => {\r\n        request.post('/api/v1/auth/signup')\r\n          .send({\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            password: ''\r\n          })\r\n          .expect(400)\r\n          .end((err, res) => {\r\n            expect(res.body.catchErrors).to.have.property('firstName');\r\n            expect(res.body.catchErrors).to.have.property('lastName');\r\n            expect(res.body.catchErrors).to.have.property('email');\r\n            expect(res.body.catchErrors).to.have.property('password');\r\n            done();\r\n          });\r\n      });\r\n      it('should  not create a new user account and return a `400`', (done) => {\r\n        request.post('/api/v1/auth/signup')\r\n          .send({\r\n            firstName: 'e1',\r\n            lastName: 'd222',\r\n            email: 'ccc.com',\r\n            password: 'jbh',\r\n          })\r\n          .expect(400)\r\n          .end((err, res) => {\r\n            expect(res.body.catchErrors).to.have.property('firstName');\r\n            expect(res.body.catchErrors).to.have.property('lastName');\r\n            expect(res.body.catchErrors).to.have.property('email');\r\n            expect(res.body.catchErrors).to.have.property('password');\r\n            done();\r\n          });\r\n      })\r\n   \r\n    describe('All test cases for user signIn ', () => {\r\n      it('should not Login  a new user and return a `422`', (done) => {\r\n        request.post('/api/v1/auth/signin')\r\n          .send({\r\n            email: 'wronguser',\r\n            password: '12345678'\r\n          })\r\n          .expect(422)\r\n          .end((err, res) => {\r\n            expect(res.body).to.have.property('status');\r\n            expect(res.body).to.have.property('message');\r\n            done();\r\n          });\r\n      });\r\n      it('should not login new user account and return a `422`', (done) => {\r\n        request.post('/api/v1/auth/signin')\r\n          .send({})\r\n          .expect(422)\r\n          .end((err, res) => {\r\n            expect(res.body).to.have.property('status');\r\n            expect(res.body).to.have.property('message');\r\n            done();\r\n          });\r\n      });\r\n      it('should not login a new user account and return a `422`', (done) => {\r\n        request.get('/api/v1/auth/signin')\r\n          .send({\r\n            email: '',\r\n            password: ''\r\n          })\r\n          .expect(422)\r\n          .end((err, res) => {\r\n            expect(res.body.signErrors).to.have.property('email');\r\n            expect(res.body.signErrors).to.have.property('password');\r\n            done();\r\n          });\r\n      });\r\n      it('should  not login a new user account and return a `400`', (done) => {\r\n        request.get('/api/v1/auth/signin')\r\n          .send({\r\n            email: 'h.com',\r\n            password: 'tyty'\r\n          })\r\n          .expect(400)\r\n          .end((err, res) => {\r\n            expect(res.body.signErrors).to.have.property('email');\r\n            expect(res.body.signErrors).to.have.property('password');\r\n            done();\r\n          });\r\n      });\r\n      it('should Login a new user and return a `201`', (done) => {\r\n        const userInfo = {\r\n          email: 'cagey@yahoo.com',\r\n          password: '123456'\r\n        };\r\n        request.get('/api/v1/auth/signin')\r\n          .send(userInfo)\r\n          .expect(201)\r\n          .end((err, res) => {\r\n            myToken = res.body.data.Token;\r\n            expect(res.body).to.have.property('status');\r\n            done();\r\n          });\r\n      });\r\n\r\n\r\n      it('Should cancel trip `201`', (done) => {\r\n        request.patch('/api/v1/trips/1')\r\n          .set('x-access-token', myToken)\r\n          .send({})\r\n          .expect(201)\r\n          .end((err, res) => {\r\n            expect(res.body).to.have.property('message');\r\n            done();\r\n          });\r\n      });\r\n  //   });\r\n    describe('test case for retriving trips', () => {\r\n      it('should return `401` status code with `res.body` failed messages', (done) => {\r\n        request.get('/api/v1/trips')\r\n          .set('x-access-token', wrongToken)\r\n          .expect(401)\r\n          .end((err, res) => {\r\n            expect(res.body).to.have.property('status');\r\n            expect(res.body).to.have.property('message');\r\n            done();\r\n          });\r\n      });\r\n      it('should get not bookings', (done) => {\r\n        request.get('/api/v1/trips/1')\r\n          .set('x-access-token', wrongToken)\r\n          .expect(401)\r\n          .end((err, res) => {\r\n            expect(res.body).to.have.property('status');\r\n            expect(res.body).to.have.property('message');\r\n            done();\r\n          });\r\n      });\r\n      it('should get not bookings', (done) => {\r\n        request.get('/api/v1/trips/1')\r\n          .set('x-access-token', wrongToken)\r\n          .expect(401)\r\n          .end((err, res) => {\r\n            expect(res.body).to.have.property('status');\r\n            expect(res.body).to.have.property('message');\r\n            done();\r\n          });\r\n      });\r\n        // it('should return `201` status code with `res.body` success messages', (done) => {\r\n        //   request.get('/api/v1/trips')\r\n        //     .set('x-access-token', myToken)\r\n        //     .expect(201)\r\n        //     .end((err, res) => {\r\n        //       console.log(res.body, '========---00');\r\n        //       done();\r\n        //     });\r\n        // });\r\n      // it('should get a one loan return `201` status code with `res.body` success messages', (done) => {\r\n      //   request.get('/api/v1/loans/1')\r\n      //     .set('x-access-token', myToken)\r\n      //     .expect(201)\r\n      //     .end((err, res) => {\r\n      //       expect(res.body).to.have.property('status');\r\n      //       expect(res.body).to.have.property('message');\r\n      //       done();\r\n      //     });\r\n      // });\r\n      it('should get not bookings', (done) => {\r\n        request.get('/api/v1/bookings')\r\n          .set('x-access-token', wrongToken)\r\n          .expect(401)\r\n          .end((err, res) => {\r\n            expect(res.body).to.have.property('status');\r\n            expect(res.body).to.have.property('message');\r\n            done();\r\n          });\r\n      });\r\n  //     it('should get repaid loans return `201 status code with `res.body` success messages', (done) => {\r\n  //       request.get('/api/v1/loans/repaid')\r\n  //         .set('x-access-token', myToken)\r\n  //         .set('Content-Type', 'application/json')\r\n  //         .expect(201)\r\n  //         .end((err, res) => {\r\n  //           expect(res.body).to.have.property('status');\r\n  //           expect(res.body).to.have.property('data');\r\n  //           done();\r\n  //         });\r\n  //     });\r\n  //     it('should return `201` status code with `res.body` success messages', (done) => {\r\n  //       request.get('/api/v1/loans')\r\n  //         .set('x-access-token', myToken)\r\n  //         .expect(201)\r\n  //         .end((err, res) => {\r\n  //           expect(res.body).to.have.property('data');\r\n  //           expect(res.body).to.have.property('status');\r\n  //           done();\r\n  //         });\r\n  //     });\r\n\r\n  //     it('should get repaid loans return `201 status code with `res.body` success messages', (done) => {\r\n  //       request.get('/api/v1/loans/unrepaid')\r\n  //         .set('Content-Type', 'application/json')\r\n  //         .expect(201)\r\n  //         .end((err, res) => {\r\n  //           expect(res.body).to.have.property('status');\r\n  //           expect(res.body).to.have.property('data');\r\n  //           done();\r\n  //         });\r\n  //     });\r\n  //     it('Should get loan repayment history return `201 status code with `res.body` success messages', (done) => {\r\n  //       request.get('/api/v1/loans/1/repayment')\r\n  //         .set('x-access-token', myToken)\r\n  //         .expect(201)\r\n  //         .end((err, res) => {\r\n  //           expect(res.body).to.have.property('status');\r\n  //           expect(res.body).to.have.property('message');\r\n  //           done();\r\n  //         });\r\n  //     });\r\n  //     it('Should get loan repayment history return `201 status code with `res.body` success messages', (done) => {\r\n  //       request.get('/api/v1/loans/55/repayment')\r\n  //         .set('x-access-token', wrongToken)\r\n  //         .expect(422)\r\n  //         .end((err, res) => {\r\n  //           expect(res.body).to.have.property('status');\r\n  //           expect(res.body).to.have.property('message');\r\n  //           done();\r\n  //         });\r\n  //     });\r\n  //   });\r\n  it('should get not bus', (done) => {\r\n    request.get('/api/v1/bus')\r\n      .set('x-access-token', wrongToken)\r\n      .expect(401)\r\n      .end((err, res) => {\r\n        expect(res.body).to.have.property('status');\r\n        expect(res.body).to.have.property('message');\r\n        done();\r\n      });\r\n  });\r\n    // describe('All test case loan Application', () => {\r\n    //   it('Should create a new bus and return a `201`', (done) => {\r\n    //     const bus = {\r\n    //       firstName: 'xanda',\r\n    //       lastName: 'cage',\r\n    //       email: 'cage@yahoo.com',\r\n    //       tenor: '3 month',\r\n    //       amount: '55,000'\r\n    //     };\r\n    //     request.post('/api/v1/loans')\r\n    //       .send(bus)\r\n    //       .expect(201)\r\n    //       .end((err, res) => {\r\n    //         console.log(res.body, '===================');\r\n    //         done();\r\n    //       });\r\n    //   });\r\n    // });\r\n    describe('All test case loan Application', () => {\r\n      it('Should create a new bus and return a `201`', (done) => {\r\n        const bus = {\r\n          number_plate : ' ',\r\n          manufacturer: ' ',\r\n          model: ' ',\r\n          year: ' ',\r\n          capacity: ' '\r\n        };\r\n        request.post('/api/v1/bus')\r\n          .send(bus)\r\n          .expect(401)\r\n          .end((err, res) => {\r\n            console.log(res.body);\r\n            done();\r\n          });\r\n      });\r\n    });\r\n  });\r\n});\r\n  });\r\n});\r\n});\r\n\r\n"],"file":"test.js"}