{"version":3,"sources":["../../server/controller/userController.js"],"names":["env","config","UserController","req","res","body","email","firstName","lastName","password","hashedPassword","bcrypt","hashSync","db","query","then","userFound","rows","length","status","json","Status","Message","sql","params","user","payload","UserId","id","token","jwt","sign","process","SECRET_KEY","expiresIn","Data","user_id","is_admin","isadmin","Token","err","message","compareSync","comparePassword","first_name","firstname","last_name","lastname","data"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport env from 'dotenv';\r\nimport db from '../model/db';\r\n\r\n\r\nenv.config();\r\n\r\nclass UserController {\r\n    signUp(req, res) {\r\n      const {email, firstName, lastName, password} = req.body;\r\n      const hashedPassword = bcrypt.hashSync(password, 10);\r\n      db.query(`SELECT id FROM users WHERE email = '${email}'`)\r\n        .then((userFound) => {\r\n          if (userFound.rows.length === 1) {\r\n            return res.status(409)\r\n              .json({\r\n                Status: 'Failed',\r\n                Message: 'User Already Exist'\r\n              });\r\n          }\r\n          const sql = 'INSERT INTO users(email, firstName, lastName, password) VALUES($1, $2, $3, $4) RETURNING *';\r\n          const params = [email, firstName, lastName, hashedPassword];\r\n          db.query(sql, params)\r\n            .then((user) => {\r\n              // console.log(user);\r\n              const payload = {\r\n                UserId: user.rows[0].id,\r\n                email, firstName, lastName\r\n              };\r\n              const token = jwt.sign(payload, process.env.SECRET_KEY, {\r\n                expiresIn: 60 * 60 * 10 // 10 hours\r\n              });\r\n              req.token = token;\r\n              return res.status(201)\r\n                .json({\r\n                  Status: 'success',\r\n                  Data : {\r\n                  user_id: user.rows[0].id,\r\n                  is_admin: user.rows[0].isadmin,\r\n                  Message: 'Successfully created WayFarer account',\r\n                  Token: token\r\n                  }\r\n                });\r\n            }).catch(err => res.status(500).json({ Status: 'Failed', Message: err.message }));\r\n        }).catch(err => res.status(500).json({ Status: 'Failed', Message: err.message }));\r\n    }\r\n\r\n    signIn(req, res) {\r\n      const { email, password } = req.body;\r\n      db.query(`SELECT * FROM users WHERE email = '${email}'`).then((user) => {\r\n        if (user.rows.length === 1) {\r\n          const hashedPassword = bcrypt.compareSync(password, user.rows[0].password);\r\n          const comparePassword = hashedPassword;\r\n          if (comparePassword) {\r\n            const payload = {\r\n              user_id: user.rows[0].id,\r\n              email,\r\n              first_name:user.rows[0].firstname,\r\n              last_name:user.rows[0].lastname,\r\n              is_admin:user.rows[0].isadmin\r\n            };\r\n            \r\n            const token = jwt.sign(payload, process.env.SECRET_KEY, { expiresIn: 60 * 60 * 10 }); // Expires in 10 hours\r\n            req.token = token;\r\n            return res.status(201)\r\n            .json({\r\n              status: 'success',\r\n              data : {\r\n              user_id: user.rows[0].id,\r\n              is_admin: user.rows[0].isadmin,\r\n              Token: token,\r\n              message: 'You are now logged in',\r\n              }\r\n            });\r\n          }\r\n        }\r\n        return res.status(422)\r\n          .json({\r\n            status: 'Failed',\r\n            message: 'Invalid Email or Password'\r\n          });\r\n      }).catch(err => res.status(500).json({ Status: 'Failed', Message: err.message }));\r\n    }\r\n\r\n}\r\n\r\nexport default new UserController();"],"file":"userController.js"}