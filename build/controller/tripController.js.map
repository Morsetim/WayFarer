{"version":3,"sources":["../../server/controller/tripController.js"],"names":["env","config","TripController","req","res","body","origin","destination","fare","trip_date","Date","userId","decoded","user_id","busId","parseInt","params","db","query","then","bus","selectedBus","rows","find","id","rowCount","status","json","message","sql","info","Status","Data","err","Message","number_plate","manufacturer","model","year","capacity","data","tripId","console","log"],"mappings":"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","sourcesContent":["import env from 'dotenv';\r\nimport db from '../model/db';\r\n\r\n\r\nenv.config();\r\n\r\n/**\r\n *\r\n *\r\n * @class TripController\r\n */\r\nclass TripController {\r\n  /**\r\n   *\r\n   *\r\n   * @param {obj} req\r\n   * @param {obj} res\r\n   * @memberof TripController\r\n   */\r\n  createTrip(req, res) {\r\n    const { origin, destination, fare } = req.body;\r\n    const trip_date = new Date();\r\n    const userId = req.decoded.user_id;\r\n    const busId = parseInt(req.params.busId);\r\n    db.query(`SELECT id FROM bus WHERE id=${busId}`).then(bus => {\r\n\r\n      const selectedBus = bus.rows.find(bus => bus.id === busId);\r\n      if (selectedBus.rowCount < 1) {\r\n        return res.status(422)\r\n          .json({\r\n            status: 'Failed',\r\n            message: `Bus with ID ${busId} doest not exist`\r\n          });\r\n      }\r\n      const sql = 'INSERT INTO trips(busId, userId, origin, destination, fare, trip_date) VALUES($1, $2, $3, $4, $5, $6) RETURNING *';\r\n      const params = [busId, userId, origin, destination, fare, trip_date];\r\n      db.query(sql, params)\r\n        .then(info => {\r\n          return res.status(201)\r\n            .json({\r\n              Status: 'success',\r\n              Data: info.rows[0]\r\n            });\r\n        }).catch(err => res.status(500).json({ status: 'Failed', message: err.message }));\r\n    }).catch(err => res.status(500).json({ status: 'Failed', message: err.message }));\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {obj} req\r\n   * @param {obj} res\r\n   * @memberof TripController\r\n   */\r\n  allTrips(req, res) {\r\n    const sql = `SELECT * FROM trips`\r\n    db.query(sql).then(info => {\r\n      return res.status(201)\r\n        .json({\r\n          Status: 'success',\r\n          Data: info.rows\r\n        });\r\n    }).catch(err => res.status(500).json({ Status: 'Failed', Message: err.message }))\r\n  }\r\n  /**\r\n   *\r\n   *\r\n   * @param {obj} req\r\n   * @param {obj} res\r\n   * @memberof TripController\r\n   */\r\n  createBus(req, res) {\r\n    const { number_plate, manufacturer, model, year, capacity } = req.body;\r\n\r\n    const sql = 'INSERT INTO bus(number_plate, manufacturer, model, year, capacity) VALUES($1,$2,$3,$4,$5) RETURNING *';\r\n    const params = [number_plate, manufacturer, model, year, capacity];\r\n    db.query(sql, params)\r\n      .then((info) => {\r\n        return res.status(201)\r\n          .json({\r\n            Status: 'success',\r\n            data: info.rows[0]\r\n          })\r\n      }).catch(err => res.status(500).json({ Status: 'Failed', Message: err.message }))\r\n  }\r\n\r\n  updateTrip(req, res) {\r\n    const {tripId} = req.params;\r\n    const userId = req.decoded.user_id;\r\n\r\n    const sql = `UPDATE trips SET status='Cancelled' WHERE id=${tripId} AND userId=${userId}`;\r\n\r\n    db.query(sql).then(() => {\r\n      return res.status(201)\r\n        .json({\r\n          message: 'Trip cancelled successfully'\r\n        })\r\n    }).catch(err => res.status(500).json({ Status: 'Failed', Message: err.message }))\r\n  }\r\n\r\n  allBookings(req, res){\r\n    const sql = `SELECT * FROM bookings`;\r\n    db.query(sql).then((info) =>{\r\n      console.log(info.rows);\r\n      return res.status(201)\r\n        .json({\r\n          status: 'Success',\r\n          data: info.rows\r\n        })\r\n    }).catch(err => res.status(500).json({ Status: 'Failed', Message: err.message }));\r\n  }\r\n  usersBookings(req, res){\r\n    const userId = req.decoded.user_id;\r\n    const sql = `SELECT * FROM bookings WHERE userId = ${userId}`;\r\n    db.query(sql).then((info) =>{\r\n      return res.status(201)\r\n        .json({\r\n          status: 'Success',\r\n          data: info.rows\r\n        })\r\n    }).catch(err => res.status(500).json({ Status: 'Failed', Message: err.message }));\r\n  }\r\n}\r\n\r\nexport default new TripController();\r\n"],"file":"tripController.js"}