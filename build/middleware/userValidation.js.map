{"version":3,"sources":["../../server/middleware/userValidation.js"],"names":["userValidator","req","res","next","body","firstName","lastName","email","password","catchErrors","undefined","status","json","message","validator","isAlpha","isEmail","isEmpty","isAlphanumeric","isLength","min","Object","keys","length","signErrors"],"mappings":"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","sourcesContent":["import validator from 'validator';\r\n\r\n\r\nclass userValidator{\r\n    signUp(req, res, next){\r\n\r\n        const {firstName, lastName, email, password} = req.body;\r\n        const catchErrors = {};\r\n\r\n        if(firstName == undefined || lastName == undefined || email == undefined || password == undefined){\r\n            return res.status(422).json({status:'Failed', message:'All or some fields are empty'});\r\n        }\r\n        if(validator.isAlpha(lastName)){\r\n            catchErrors.lastName = 'Fields should contain alphabets';\r\n        }\r\n        if(validator.isAlpha(firstName)){\r\n            catchErrors.firstName = 'Fields should contain alphabets';\r\n        }\r\n        if(!validator.isEmail(email)){\r\n            catchErrors.email = 'Fieldsssss must be an Email format';\r\n        }\r\n        if(validator.isEmpty(email)){\r\n            catchErrors.email = 'Fieldsss must be an Email format';\r\n        }\r\n        if(validator.isAlphanumeric(password)){\r\n            catchErrors.password = 'It can only contain alphabets';\r\n        }\r\n        if(!validator.isEmpty(password)){\r\n            if(!validator.isLength(password, {min:6})){\r\n                catchErrors.password = 'Password length must be at least six characters long';\r\n            }\r\n        }else{\r\n            catchErrors.password = 'Field cannot be Empty';\r\n        }\r\n        if(Object.keys(catchErrors).length != 0){\r\n            return res.status(400).json({catchErrors});\r\n        }\r\n        next();\r\n}\r\nsignIn(req, res, next){\r\n    const {email, password} = req.body;\r\n    let signErrors = {};\r\n    if(email == undefined || password == undefined){\r\n    return res.status(422).json({status:'Failed', message:'All or some fields are empty'}); \r\n    }\r\n    if(!validator.isEmail(email)){\r\n        signErrors.email = 'Field must be an Email format';\r\n    }\r\n\r\n    if(!validator.isEmpty(password)){\r\n        if(!validator.isLength(password, {min:6})){\r\n            signErrors.password = 'Password length must be at least six characters long';\r\n        }\r\n    }else{\r\n        signErrors.password = 'Field cannot be Empty';\r\n    }\r\n    if(Object.keys(signErrors).length != 0){\r\n        return res.status(422).json({signErrors});\r\n    }\r\n    next();\r\n}\r\n}\r\n\r\nexport default new userValidator();\r\n"],"file":"userValidation.js"}