{"version":3,"sources":["../../server/middleware/userValidation.js"],"names":["userValidator","req","res","next","body","firstName","lastName","email","password","catchErrors","undefined","status","json","message","validator","isLength","min","search","isEmail","isEmpty","isAlphanumeric","Object","keys","length","signErrors"],"mappings":"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","sourcesContent":["import validator from 'validator';\r\n\r\n\r\nclass userValidator{\r\n    signUp(req, res, next){\r\n\r\n        const {firstName, lastName, email, password} = req.body;\r\n        const catchErrors = {};\r\n\r\n        if(firstName == undefined || lastName == undefined || email == undefined || password == undefined){\r\n            return res.status(422).json({status:'Failed', message:'All or some fields are empty'});\r\n        }\r\n        if(!validator.isLength(firstName, {min:2})){\r\n            catchErrors.firstName = 'First name length must be at least two characters long';\r\n        }\r\n        if(firstName.search(/^[a-zA-Z]*$/) === -1){\r\n            catchErrors.firstName = 'Firstname should only be Alphabets';\r\n        }\r\n        if(!validator.isLength(lastName, {min:2})){\r\n            catchErrors.lastName = 'Lastname length must be at least two characters long';\r\n        }\r\n        if(lastName.search(/^[a-zA-Z]*$/) === -1){\r\n            catchErrors.lastName = 'Lastname should only be Alphabets';\r\n        }\r\n        if(!validator.isEmail(email)){\r\n            catchErrors.email = 'Field must be an Email format';\r\n        }\r\n        if(validator.isEmpty(email)){\r\n            catchErrors.email = 'Field must be an Email format';\r\n        }\r\n        if(!validator.isAlphanumeric(password)){\r\n            catchErrors.password = 'Fields should contain alphabets and numbers';\r\n        }\r\n        if(!validator.isEmpty(password)){\r\n            if(!validator.isLength(password, {min:6})){\r\n                catchErrors.password = 'Password length must be at least six characters long';\r\n            }\r\n        }else{\r\n            catchErrors.password = 'Field cannot be Empty';\r\n        }\r\n        if(Object.keys(catchErrors).length != 0){\r\n            return res.status(400).json({catchErrors});\r\n        }\r\n        next();\r\n}\r\nsignIn(req, res, next){\r\n    const {email, password} = req.body;\r\n    let signErrors = {};\r\n    if(email == undefined || password == undefined){\r\n    return res.status(422).json({status:'Failed', message:'All or some fields are empty'}); \r\n    }\r\n    if(!validator.isEmail(email)){\r\n        signErrors.email = 'Field must be an Email format';\r\n    }\r\n\r\n    if(!validator.isEmpty(password)){\r\n        if(!validator.isLength(password, {min:6})){\r\n            signErrors.password = 'Password length must be at least six characters long';\r\n        }\r\n    }else{\r\n        signErrors.password = 'Field cannot be Empty';\r\n    }\r\n    if(Object.keys(signErrors).length != 0){\r\n        return res.status(422).json({signErrors});\r\n    }\r\n    next();\r\n}\r\n}\r\n\r\nexport default new userValidator();"],"file":"userValidation.js"}