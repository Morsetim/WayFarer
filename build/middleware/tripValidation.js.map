{"version":3,"sources":["../../server/middleware/tripValidation.js"],"names":["tripValidator","req","res","next","body","origin","destination","fare","catchErrors","undefined","status","json","message","validator","isAlphanumeric","isEmpty","isAlpha","Object","keys","length","number_plate","manufacturer","model","year","capacity"],"mappings":"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","sourcesContent":["import validator from 'validator';\r\n\r\nclass tripValidator{\r\n    createTrip(req, res, next){\r\n\r\n    const {origin, destination, fare} = req.body;\r\n    const catchErrors = {};\r\n    if(origin == undefined || destination == undefined || fare == undefined){\r\n        return res.status(422).json({status:'Failed', message:'All or some fields are empty'});\r\n    }\r\n    \r\n    if(validator.isAlphanumeric(origin)){\r\n        if(validator.isEmpty(origin)){\r\n        catchErrors.origin = 'Field cannot be empty';\r\n        }   \r\n    }else{\r\n        catchErrors.origin = 'Fields should contain alphabets and numbers';\r\n        }\r\n    if(validator.isAlphanumeric(destination)){\r\n        if(validator.isEmpty(destination)){\r\n        catchErrors.destination = 'Field cannot be empty';\r\n        }   \r\n    }else{\r\n            catchErrors.destination = 'Fields should contain alphabets and numbers';\r\n        }        \r\n    if(validator.isEmpty(fare)){\r\n        catchErrors.fare = 'Field cannot be empty';\r\n        }\r\n    if(validator.isAlpha(fare)){\r\n        catchErrors.fare = 'Field Should only contain numbers';\r\n        }\r\n    if(Object.keys(catchErrors).length != 0){\r\n        return res.status(400).json({catchErrors});\r\n    }\r\n    next();\r\n}\r\n    createBus(req, res, next){\r\n        const {number_plate, manufacturer, model, year, capacity} = req.body;\r\n        const catchErrors = {};\r\n        if(number_plate == undefined || manufacturer == undefined || model == undefined || year == undefined || capacity == undefined){\r\n            return res.status(422).json({status:'Failed', message:'All or some fields are empty'});\r\n        }\r\n        if(validator.isAlphanumeric(number_plate)){\r\n            if(validator.isEmpty(number_plate)){\r\n            catchErrors.number_plate = 'Field cannot be empty';\r\n            }   \r\n        }else{\r\n            catchErrors.number_plate = 'Fields should contain alphabets and numbers';\r\n            }\r\n        if(validator.isAlphanumeric(manufacturer)){\r\n            if(validator.isEmpty(manufacturer)){\r\n            catchErrors.manufacturer = 'Field cannot be empty';\r\n            }   \r\n        }else{\r\n                catchErrors.manufacturer = 'Fields should contain alphabets and numbers';\r\n            }\r\n        if(validator.isAlphanumeric(model)){\r\n            if(validator.isEmpty(model)){\r\n            catchErrors.model = 'Field cannot be empty';\r\n            }   \r\n        }else{\r\n                catchErrors.model = 'Fields should contain alphabets and numbers';\r\n            }             \r\n        if(validator.isEmpty(year)){\r\n            catchErrors.year = 'Field cannot be empty';\r\n            }\r\n        if(validator.isAlpha(year)){\r\n            catchErrors.year = 'Field Should only contain numbers';\r\n            }\r\n        if(validator.isEmpty(capacity)){\r\n            catchErrors.capacity = 'Field cannot be empty';\r\n            }\r\n        if(validator.isAlpha(capacity)){\r\n            catchErrors.capacity = 'Field Should only contain numbers';\r\n            }\r\n        if(Object.keys(catchErrors).length != 0){\r\n            return res.status(400).json({catchErrors});\r\n        }\r\n        next(); \r\n    }\r\n}\r\n\r\nexport default new tripValidator();"],"file":"tripValidation.js"}